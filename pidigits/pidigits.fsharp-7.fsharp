type F = F of bigint * bigint * bigint * bigint

let ns = 
    Seq.unfold (fun k -> Some(F (k, 4I * k + 2I, 0I, 2I*k + 1I),k+1I) ) 1I

let flr x (F (q,r,s,t)) = (q*x + r) / (s*x + t)
let comp (F (q,r,s,t)) (F (u,v,w,x)) = F (q*u + r*w, q*v + r*x, s*u + t*w, s*v + t*x) 

let ostr =
    Seq.unfold (fun za -> let y = flr 3I za
                          match y with
                          | y when y = flr 4I za -> let za2 = comp (F (10I,-10I*y,0I,1I)) za
                                                    Some ((y,za2),za2)
                          | _                    -> None)
  

let nostr (z: F) =
    Seq.scan (fun (za,yl) x -> let res = ostr za
                               match Seq.isEmpty res with
                               | true  -> (comp za x), Seq.empty<bigint>
                               | false -> let zlast = res |> Seq.last |> snd
                                          (comp zlast x),(res |> Seq.map fst)) (z, (Seq.empty<bigint>))


let rec loop = function
    | n, s, l when Seq.isEmpty l  -> printfn "%s\t:%A" (String.replicate n " ") s
    | 0, s, xs    -> printfn "\t:%A" s;loop (10,s,xs)
    | n, s, l -> printf "%A" (Seq.head l);loop ((n-1),(s+1I),(Seq.tail l))

[<EntryPoint>]
let main args =
    let n = try int args.[0] with _ -> 27
    ns
    |> (nostr (F(1I,0I,0I,1I)))
    |> Seq.collect snd
    |> Seq.take n
    |> Seq.cache
    |> Seq.iter (printf "%A")
    // |> (fun x -> loop (10,0I,x))
    0
